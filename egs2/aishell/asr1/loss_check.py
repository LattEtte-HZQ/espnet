# from warprnnt_pytorch import RNNTLoss
import torch
import torch.nn.functional as F
from torchaudio import transforms

criterion_transducer = transforms.RNNTLoss(reduction="mean", blank=0)
joint_out0 = torch.load('Ajoint_outs0_cpu.pth')
joint_out1 = torch.load('Ajoint_outs1_cpu.pth')

target = torch.tensor([[  7,  81,   2,  26,   8,   5,  24, 129,  38,   9,  87,   2,  13,  33,
          63,   2,  94,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
           0],
        [ 15,  28,   9,  44,  16,  54,  36,  27,  37,   2,  13,   4,  18,   3,
          63,   8,  21,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
           0],
        [ 16,  18,  19,  40,  37,  24,  49,  10,  92,   4,   5,   4,  18,  27,
          37,  16,  37,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
           0],
        [124,   9, 119,   3,  12,   4,  46,  19,  46,   6,   5,   2,  94,  89,
          17,  33, 102,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
           0],
        [  6,  29,  10, 101,   4,   5,   9,  29,   2,  94,  53,   2,  13,   4,
           5,   3,  56,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
           0],
        [ 10,  17,   9,  44,  20,  40,   7,  67,   4,  94,  27, 131, 125,   9,
          25,  15,  12,  11, 101,   2,  12,   0,   0,   0,   0,   0,   0,   0,
           0],
        [  2,  70,   3,  81,   7,  81,   9,  95,  19,  17,  15,  38,  24,  49,
          10,  92,   4,   5,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
           0],
        [164,  20,  99,  27,  70,   3,  12,  10,  28,   4,  21,   2,   5, 126,
          23,  12,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
           0],
        [ 20,  40,  21,   6,  25,   9,  64,   4,   5,  14,  68,  26,   3,  12,
          14,  36,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
           0],
        [124,  22,  30,   2,  13,   4,   5,   3,  56,  86,  27,  70,  22,  13,
           3,  57,  39,  65,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
           0],
        [ 10,  47,  33,  17,  14,  59,  31, 139,   8,  32,  22,  40,  22,  40,
           0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
           0],
        [  7,  85,   7,  12,   4,  18,  10,  34,   3,   5,   6,  83,   8, 127,
          11,  34,  56,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
           0],
        [  8, 144,   2,   5,   2,  13,   3,  85,   6,  60,   4,  18,  19,  66,
           7, 118,  23,  17,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
           0],
        [ 15,  26,  11,  58,   6, 100,  14,  50,   6, 120,   9,  29,   7,  74,
          20,  21,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
           0],
        [  2,  43,  41,  26,   2,  30,  20,  12,  22, 122,  48,  20,  32,   6,
          21,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
           0],
        [  6,  29,  16,  21,  43,   3,  30,   2,  55,   6,  25,   2,  13,   8,
         104,  27,  84,  12,  27, 131,   2,  79,   8,  47,  48,   3,  80,   4,
           5]], dtype=torch.int32)
new_target = torch.tensor([[ 81,   2,  26,   8,   5,  24, 129,  38,   9,  87,   2,  13,  33,  63,
           2,  94,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
           0],
        [ 28,   9,  44,  16,  54,  36,  27,  37,   2,  13,   4,  18,   3,  63,
           8,  21,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
           0],
        [ 18,  19,  40,  37,  24,  49,  10,  92,   4,   5,   4,  18,  27,  37,
          16,  37,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
           0],
        [  9, 119,   3,  12,   4,  46,  19,  46,   6,   5,   2,  94,  89,  17,
          33, 102,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
           0],
        [ 29,  10, 101,   4,   5,   9,  29,   2,  94,  53,   2,  13,   4,   5,
           3,  56,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
           0],
        [ 17,   9,  44,  20,  40,   7,  67,   4,  94,  27, 131, 125,   9,  25,
          15,  12,  11, 101,   2,  12,   0,   0,   0,   0,   0,   0,   0,   0,
           0],
        [ 70,   3,  81,   7,  81,   9,  95,  19,  17,  15,  38,  24,  49,  10,
          92,   4,   5,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
           0],
        [ 20,  99,  27,  70,   3,  12,  10,  28,   4,  21,   2,   5, 126,  23,
          12,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
           0],
        [ 40,  21,   6,  25,   9,  64,   4,   5,  14,  68,  26,   3,  12,  14,
          36,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
           0],
        [ 22,  30,   2,  13,   4,   5,   3,  56,  86,  27,  70,  22,  13,   3,
          57,  39,  65,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
           0],
        [ 47,  33,  17,  14,  59,  31, 139,   8,  32,  22,  40,  22,  40,   0,
           0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
           0],
        [ 85,   7,  12,   4,  18,  10,  34,   3,   5,   6,  83,   8, 127,  11,
          34,  56,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
           0],
        [144,   2,   5,   2,  13,   3,  85,   6,  60,   4,  18,  19,  66,   7,
         118,  23,  17,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
           0],
        [ 26,  11,  58,   6, 100,  14,  50,   6, 120,   9,  29,   7,  74,  20,
          21,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
           0],
        [ 43,  41,  26,   2,  30,  20,  12,  22, 122,  48,  20,  32,   6,  21,
           0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
           0],
        [ 29,  16,  21,  43,   3,  30,   2,  55,   6,  25,   2,  13,   8, 104,
          27,  84,  12,  27, 131,   2,  79,   8,  47,  48,   3,  80,   4,   5,
           0]],
       dtype=torch.int32)
t_len = torch.tensor([95, 95, 95, 95, 95, 95, 95, 95, 95, 95, 95, 95, 95, 95, 95, 95], dtype=torch.int32)
u_len = torch.tensor([17, 17, 17, 17, 17, 21, 18, 16, 16, 18, 14, 17, 18, 16, 15, 29], dtype=torch.int32)
new_u_len = u_len - 1

print(joint_out0.size())
print(joint_out1.size())
print(criterion_transducer(
    joint_out0,
    target,
    t_len,
    u_len,
))
print(criterion_transducer(
    joint_out1,
    new_target[:, :-1].contiguous(),
    t_len,
    new_u_len,
))